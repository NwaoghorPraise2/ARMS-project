services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.2
    platform: linux/arm64
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - '2181:2181'
    healthcheck:
      test:
        [
          'CMD',
          'echo',
          'ruok',
          '|',
          'nc',
          'localhost',
          '2181',
          '|',
          'grep',
          'imok',
        ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - kafka_network

  kafka1:
    image: confluentinc/cp-kafka:7.3.2
    platform: linux/arm64
    hostname: kafka1
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - '9092:9092'
      - '29092:29092'
      - '9980:9980'
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka1:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,PLAINTEXT_HOST://0.0.0.0:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_DEFAULT_REPLICATION_FACTOR: 3
      KAFKA_MIN_INSYNC_REPLICAS: 2
      KAFKA_JMX_PORT: 9999
      KAFKA_JMX_HOSTNAME: kafka1
      KAFKA_HEAP_OPTS: '-Xmx1G -Xms512M'
      KAFKA_LOG4J_ROOT_LOGLEVEL: 'INFO'
      KAFKA_OPTS: '-javaagent:/jmx_exporter/jmx_prometheus_javaagent-0.20.0.jar=9980:/jmx_exporter/kafka.yml -Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -Djava.rmi.server.hostname=kafka1'
    volumes:
      - ./jmx_exporter:/jmx_exporter
    networks:
      - kafka_network

  kafka2:
    image: confluentinc/cp-kafka:7.3.2
    platform: linux/arm64
    hostname: kafka2
    depends_on:
      - kafka1
    ports:
      - '9093:9093'
      - '29093:29093'
      - '9981:9981'
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka2:9093,PLAINTEXT_HOST://localhost:29093
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9093,PLAINTEXT_HOST://0.0.0.0:29093
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_DEFAULT_REPLICATION_FACTOR: 3
      KAFKA_MIN_INSYNC_REPLICAS: 2
      KAFKA_JMX_PORT: 9998
      KAFKA_JMX_HOSTNAME: kafka2
      KAFKA_HEAP_OPTS: '-Xmx1G -Xms512M'
      KAFKA_LOG4J_ROOT_LOGLEVEL: 'INFO'
      KAFKA_OPTS: '-javaagent:/jmx_exporter/jmx_prometheus_javaagent-0.20.0.jar=9981:/jmx_exporter/kafka.yml -Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -Djava.rmi.server.hostname=kafka2'
    volumes:
      - ./jmx_exporter:/jmx_exporter
    networks:
      - kafka_network

  kafka3:
    image: confluentinc/cp-kafka:7.3.2
    platform: linux/arm64
    hostname: kafka3
    depends_on:
      - kafka2
    ports:
      - '9094:9094'
      - '29094:29094'
      - '9982:9982'
    environment:
      KAFKA_BROKER_ID: 3
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka3:9094,PLAINTEXT_HOST://localhost:29094
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9094,PLAINTEXT_HOST://0.0.0.0:29094
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_DEFAULT_REPLICATION_FACTOR: 3
      KAFKA_MIN_INSYNC_REPLICAS: 2
      KAFKA_JMX_PORT: 9997
      KAFKA_JMX_HOSTNAME: kafka3
      KAFKA_HEAP_OPTS: '-Xmx1G -Xms512M'
      KAFKA_LOG4J_ROOT_LOGLEVEL: 'INFO'
      KAFKA_OPTS: '-javaagent:/jmx_exporter/jmx_prometheus_javaagent-0.20.0.jar=9982:/jmx_exporter/kafka.yml -Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -Djava.rmi.server.hostname=kafka3'
    volumes:
      - ./jmx_exporter:/jmx_exporter
    networks:
      - kafka_network

  prometheus:
    image: prom/prometheus
    platform: linux/arm64
    ports:
      - '9090:9090'
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - kafka_network

  grafana:
    image: grafana/grafana
    platform: linux/arm64
    ports:
      - '3000:3000'
    volumes:
      - ./grafana/provisioning:/etc/grafana/provisioning
      - ./grafana/dashboards:/var/lib/grafana/dashboards
      - grafana-data:/var/lib/grafana
    depends_on:
      - prometheus
    networks:
      - kafka_network

  node-exporter:
    image: prom/node-exporter
    platform: linux/arm64
    ports:
      - '9100:9100'
    networks:
      - kafka_network

  workload-generator:
    build:
      context: .
      dockerfile: Dockerfile.workload-generator
    container_name: workload-generator
    restart: unless-stopped
    ports:
      - '8000:8000'
      - '5005:5005' # Debugging port
    environment:
      - BOOTSTRAP_SERVERS=kafka1:9092,kafka2:9093,kafka3:9094
      - TOPIC=ai_workloads
      - METRICS_PORT=8000
    depends_on:
      - kafka1
      - kafka2
      - kafka3
    networks:
      - kafka_network

  arms-classifier:
    build:
      context: .
      dockerfile: Dockerfile.classifier
    container_name: arms-classifier
    restart: unless-stopped
    ports:
      - '5001:5001' # API endpoint
      - '8001:8001' # Prometheus metrics endpoint
    environment:
      - TZ=UTC
      - PROMETHEUS_URL=http://prometheus:9090
      - WORKLOAD_GENERATOR_URL=http://workload-generator:8000
      - '--strategy-buffer=/app/data/strategy_buffer.json'
    volumes:
      - ./models:/app/models
    depends_on:
      - prometheus
    networks:
      - kafka_network

  arms-controller:
    build:
      context: .
      dockerfile: Dockerfile.controller
    container_name: arms-controller
    restart: unless-stopped
    ports:
      - '8002:8002' # Prometheus metrics endpoint
    environment:
      - KAFKA_BROKERS_ALTERNATIVE=kafka1:29092,kafka2:29093,kafka3:29094
      - RECOVERY_API_URL=http://arms-classifier:5001/api/strategy
      - PROMETHEUS_URL=http://prometheus:9090/api/v1/query
      - KAFKA_BROKERS=kafka1:9092,kafka2:9093,kafka3:9094,kafka1:29092,kafka2:29093,kafka3:29094
      - BUFFER_UPDATE_INTERVAL=2
      - MONITORING_INTERVAL=5
      - METRICS_PORT=8002
      - TEST_MODE=True
      - TEST_BROKER=kafka1:9092 # Broker to simulate failures for
      - TEST_INTERVAL=60 # Seconds between simulated failures
    volumes:
      - ./data:/app/data
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      - kafka1
      - kafka2
      - kafka3
      - prometheus
      - arms-classifier
    networks:
      - kafka_network

networks:
  kafka_network:
    driver: bridge

volumes:
  grafana-data:
  data:
